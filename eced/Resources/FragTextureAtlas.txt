#version 330 core

smooth in vec2 tileloc;

out vec4 color;

uniform sampler2D atlas;
uniform sampler2D numbers;
uniform isampler2D texInfo;
uniform isampler2D mapPlane;

void main()
{
	//gross hack
	ivec2 itile = ivec2(tileloc);

	ivec4 tilemapInfo = texelFetch(mapPlane, itile, 0);
	int type = tilemapInfo.r & 255;
	int mode = (tilemapInfo.r >> 8) & 255;
	int tileid = tilemapInfo.g;
	int floorid = tilemapInfo.g;

	float multiplier = 0.5;

	int neighbors = 0;
	//Check if neighbors are empty (id 2) instead of tile (id 1)
	if (type == 1)
	{
		if ((texelFetch(mapPlane, ivec2(itile.x - 1, itile.y), 0).r & 255) == 2)
		{
			neighbors |= 1;
		}
		if ((texelFetch(mapPlane, ivec2(itile.x + 1, itile.y), 0).r & 255) == 2)
		{
			neighbors |= 2;
		}
		if ((texelFetch(mapPlane, ivec2(itile.x, itile.y - 1), 0).r & 255) == 2)
		{
			neighbors |= 4;
		}
		if ((texelFetch(mapPlane, ivec2(itile.x, itile.y + 1), 0).r & 255) == 2)
		{
			neighbors |= 8;
		}
	}
	else
	{
		multiplier = tilemapInfo.a / 255.0;
	}

	ivec4 textureInfo;

	ivec2 cellpos;
	vec2 cellposf;

	if (mode == 0) //Show floor code
	{
		ivec2 texOrigin = ivec2(floorid / 16, 0) * 8;
		ivec2 texOrigin2 = ivec2(floorid % 16, 0) * 8;

		cellposf = vec2((tileloc.x - itile.x) * 2 , tileloc.y - itile.y);
		if (cellposf.x > 1)
			cellpos = ivec2(texOrigin2.x + int((cellposf.x - 1) * 8), texOrigin.y + int(cellposf.y * 16));

		else
			cellpos = ivec2(texOrigin.x + int(cellposf.x * 8), texOrigin.y + int(cellposf.y * 16));
	}
	else if (mode == 1) //Show textured wall
	{
		textureInfo = texelFetch(texInfo, ivec2(0, tileid), 0);
		ivec2 textureRes = textureInfo.rg;
		ivec2 texOrigin = textureInfo.ba;

		cellposf = vec2(tileloc.x - itile.x , tileloc.y - itile.y);
		cellpos = ivec2(texOrigin.x + int(cellposf.x * textureRes.x), texOrigin.y + int(cellposf.y * textureRes.y));
	}

	//Darken the edges of tiles with neighboring empty cells
	if (neighbors != 0)
	{
		multiplier = 1.0;
		if ((neighbors & 1) != 0)
		{
			multiplier *= (clamp(cellposf.x * 5.0, 0.0, 1.0));
		}
		if ((neighbors & 2) != 0)
		{
			multiplier *= (clamp((1.0 - cellposf.x) * 5.0, 0.0, 1.0));
		}
		if ((neighbors & 4) != 0)
		{
			multiplier *= (clamp(cellposf.y * 5.0, 0.0, 1.0));
		}
		if ((neighbors & 8) != 0)
		{
			multiplier *= (clamp((1.0 - cellposf.y) * 5.0, 0.0, 1.0));
		}
	}

	if (mode == 0) //Show floor code
	{
		color = texelFetch(numbers, cellpos, 0);
	}
	else if (mode == 1) //Normal tile
	{
		color = texelFetch(atlas, cellpos, 0) * multiplier;
		//hack
		color.a = 1.0;
	}
	else if (mode == 2) //Solid color tile
	{
		int r = tilemapInfo.g & 255;
		int g = (tilemapInfo.g >> 8) & 255;
		color = vec4(r / 255.0, g / 255.0, tilemapInfo.b / 255.0, 1.0f) * multiplier;
		//hack
		color.a = 1.0;
	}
}